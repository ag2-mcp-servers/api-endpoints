# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T08:51:25+00:00



import argparse
import json
import os
from typing import *
from typing import Optional

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity, HTTPBasic
from fastapi import Header, Path, Query, UploadFile
from pydantic import conint

from models import Changelog, CustomPage, Doc, Version

app = MCPProxy(
    description='Create beautiful product and API documentation with our developer friendly platform.',
    title='API Endpoints',
    version='2.0.0',
    servers=[{'url': 'https://dash.readme.io/api/v1'}],
)


@app.get(
    '/#-datamodel-code-generator-#-root-#-special-#',
    description=""" Returns project data for API key """,
    tags=['project_metadata_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_project():
    """
    Get metadata about the current project
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api-specification',
    description=""" Get API specification metadata """,
    tags=['api_specification_handling', 'version_control_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_a_p_i_specification(
    per_page: Optional[conint(ge=1, le=100)] = Query(10, alias='perPage'),
    page: Optional[conint(ge=1)] = 1,
    x_readme_version: str = Header(..., alias='x-readme-version'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api-specification',
    description=""" Upload an API specification to ReadMe. Or, to use a newer solution see https://docs.readme.com/guides/docs/automatically-sync-api-specification-with-github """,
    tags=['api_specification_handling', 'version_control_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def upload_a_p_i_specification(
    x_readme_version: str = Header(..., alias='x-readme-version'),
    file: UploadFile = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api-specification/{id}',
    description=""" Delete an API specification in ReadMe """,
    tags=['project_metadata_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def delete_a_p_i_specification(id: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api-specification/{id}',
    description=""" Update an API specification in ReadMe """,
    tags=['api_specification_handling', 'swagger_file_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def update_a_p_i_specification(id: str, file: UploadFile = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/categories/{slug}',
    description=""" Returns the category with this slug """,
    tags=['category_information_management', 'api_specification_handling'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_category(
    slug: str, x_readme_version: str = Header(..., alias='x-readme-version')
):
    """
    Get category
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/categories/{slug}/docs',
    description=""" Returns the docs and children docs within this category """,
    tags=['category_information_management', 'api_specification_handling'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_category_docs(
    slug: str, x_readme_version: str = Header(..., alias='x-readme-version')
):
    """
    Get docs for category
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/changelogs',
    description=""" Returns a list of changelogs associated with the project API key """,
    tags=['changelog_tracking'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_changelogs(
    per_page: Optional[conint(ge=1, le=100)] = Query(10, alias='perPage'),
    page: Optional[conint(ge=1)] = 1,
):
    """
    Get changelogs
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/changelogs',
    description=""" Create a new changelog inside of this project """,
    tags=['changelog_tracking'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def create_changelog(body: Changelog):
    """
    Create changelog
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/changelogs/{slug}',
    description=""" Delete the changelog with this slug """,
    tags=['changelog_tracking'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def delete_changelog(slug: str):
    """
    Delete changelog
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/changelogs/{slug}',
    description=""" Returns the changelog with this slug """,
    tags=['changelog_tracking'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_changelog(slug: str):
    """
    Get changelog
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/changelogs/{slug}',
    description=""" Update a changelog with this slug """,
    tags=['changelog_tracking'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def update_changelog(slug: str, body: Changelog = ...):
    """
    Update changelog
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/custompages',
    description=""" Returns a list of custom pages associated with the project API key """,
    tags=['custom_page_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_custom_pages(
    per_page: Optional[conint(ge=1, le=100)] = Query(10, alias='perPage'),
    page: Optional[conint(ge=1)] = 1,
):
    """
    Get custom pages
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/custompages',
    description=""" Create a new custom page inside of this project """,
    tags=['custom_page_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def create_custom_page(body: CustomPage):
    """
    Create custom page
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/custompages/{slug}',
    description=""" Delete the custom page with this slug """,
    tags=['custom_page_operations', 'document_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def delete_custom_page(slug: str):
    """
    Delete custom page
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/custompages/{slug}',
    description=""" Returns the custom page with this slug """,
    tags=['custom_page_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_custom_page(slug: str):
    """
    Get custom page
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/custompages/{slug}',
    description=""" Update a custom page with this slug """,
    tags=['custom_page_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def update_custom_page(slug: str, body: CustomPage = ...):
    """
    Update custom page
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/docs',
    description=""" Create a new doc inside of this project """,
    tags=['document_operations', 'api_specification_handling'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def create_doc(
    x_readme_version: str = Header(..., alias='x-readme-version'), body: Doc = ...
):
    """
    Create doc
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/docs/search',
    description=""" Returns all docs that match the search """,
    tags=['document_operations', 'api_specification_handling'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def search_docs(
    search: str, x_readme_version: str = Header(..., alias='x-readme-version')
):
    """
    Search docs
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/docs/{slug}',
    description=""" Delete the doc with this slug """,
    tags=['document_operations', 'custom_page_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def delete_doc(
    slug: str, x_readme_version: str = Header(..., alias='x-readme-version')
):
    """
    Delete doc
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/docs/{slug}',
    description=""" Returns the doc with this slug """,
    tags=['api_specification_handling', 'document_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_doc(slug: str, x_readme_version: str = Header(..., alias='x-readme-version')):
    """
    Get doc
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/docs/{slug}',
    description=""" Update a doc with this slug """,
    tags=[
        'document_operations',
        'version_control_management',
        'api_specification_handling',
    ],
    security=[
        HTTPBasic(name="None"),
    ],
)
def update_doc(
    slug: str,
    x_readme_version: str = Header(..., alias='x-readme-version'),
    body: Doc = ...,
):
    """
    Update doc
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/errors',
    description=""" Returns with all of the error page types for this project """,
    tags=['error_log_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_errors():
    """
    Get errors
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/swagger',
    description=""" DEPRECATED. Instead use https://docs.readme.com/developers/reference/api-specification#uploadapispecification to upload a Swagger file to ReadMe """,
    tags=['swagger_file_management', 'api_specification_handling'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def upload_swagger(file: UploadFile):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/swagger/{id}',
    description=""" DEPRECATED. Instead, use https://docs.readme.com/developers/reference/api-specification#deleteapispecification to delete a Swagger file in ReadMe """,
    tags=[
        'project_metadata_management',
        'api_specification_handling',
        'document_operations',
    ],
    security=[
        HTTPBasic(name="None"),
    ],
)
def delete_swagger(id: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/swagger/{id}',
    description=""" DEPRECATED. Instead, use https://docs.readme.com/developers/reference/api-specification#updateapispecification to update a Swagger file. """,
    tags=['api_specification_handling', 'swagger_file_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def update_swagger(id: str, file: UploadFile = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/version',
    description=""" Retrieve a list of versions associated with a project API key """,
    tags=['project_metadata_management', 'version_control_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_versions():
    """
    Get versions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/version',
    description=""" Create a new version """,
    tags=['version_control_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def create_version(body: Version):
    """
    Create version
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/version/{versionId}',
    description=""" Delete a version """,
    tags=['version_control_management', 'changelog_tracking'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def delete_version(version_id: str = Path(..., alias='versionId')):
    """
    Delete version
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/version/{versionId}',
    description=""" Returns the version with this version ID """,
    tags=['version_control_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_version(version_id: str = Path(..., alias='versionId')):
    """
    Get version
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/version/{versionId}',
    description=""" Update an existing version """,
    tags=['version_control_management', 'project_metadata_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def update_version(version_id: str = Path(..., alias='versionId'), body: Version = ...):
    """
    Update version
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
