# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T08:51:25+00:00

from __future__ import annotations

from enum import Enum
from typing import Optional

from pydantic import BaseModel, Field


class Type(Enum):
    field_ = ''
    added = 'added'
    fixed = 'fixed'
    improved = 'improved'
    deprecated = 'deprecated'
    removed = 'removed'


class Changelog(BaseModel):
    body: str = Field(..., description='Body content of the changelog')
    hidden: Optional[bool] = Field(True, description='Visibility of the changelog')
    title: str = Field(..., description='Title of the changelog')
    type: Optional[Type] = ''


class CustomPage(BaseModel):
    body: Optional[str] = Field(
        None, description='Body formatted in Markdown (displayed by default).'
    )
    hidden: Optional[bool] = Field(True, description='Visibility of the custom page')
    html: Optional[str] = Field(
        None,
        description='Body formatted in HTML (sanitized, only displayed if `htmlmode` is **true**).',
    )
    htmlmode: Optional[bool] = Field(
        False,
        description='**true** if `html` should be displayed, **false** if `body` should be displayed.',
    )
    title: str = Field(..., description='Title of the custom page')


class Type1(Enum):
    basic = 'basic'
    error = 'error'
    link = 'link'


class Doc(BaseModel):
    body: Optional[str] = Field(
        None,
        description='Body content of the page, formatted in ReadMe or Github flavored Markdown. Accepts long page content, for example, greater than 100k characters',
    )
    category: str = Field(
        ...,
        description='Category ID of the page, which you can get through https://docs.readme.com/developers/reference/categories#getcategory ',
    )
    hidden: Optional[bool] = Field(True, description='Visibility of the page')
    parentDoc: Optional[str] = Field(
        None,
        description='For a subpage, specify the parent doc ID, which you can get through https://docs.readme.com/developers/reference/docs#getdoc',
    )
    title: str = Field(..., description='Title of the page')
    type: Optional[Type1] = Field(
        None,
        description='Type of the page. The available types all show up under the /docs/ URL path of your docs project (also known as the "guides" section). Can be "basic" (most common), "error" (page desribing an API error), or "link" (page that redirects to an external link)',
    )


class Version(BaseModel):
    codename: Optional[str] = Field(None, description='Dubbed name of version')
    from_: str = Field(
        ..., alias='from', description='Semantic Version to use as the base fork'
    )
    is_beta: Optional[bool] = True
    is_deprecated: Optional[bool] = Field(
        None, description='Should this be deprecated? Only allowed in PUT operations'
    )
    is_hidden: Optional[bool] = Field(
        None, description='Should this be publically accessible?'
    )
    is_stable: Optional[bool] = Field(
        None, description='Should this be the **main** version'
    )
    version: str = Field(..., description='Semantic Version')


class ApiSpecificationPostRequest(BaseModel):
    spec: Optional[bytes] = Field(None, description='OpenAPI/Swagger file')


class ApiSpecificationIdPutRequest(BaseModel):
    spec: Optional[bytes] = Field(None, description='OpenAPI/Swagger file')


class SwaggerPostRequest(BaseModel):
    swagger: Optional[bytes] = Field(None, description='Swagger file')


class SwaggerIdPutRequest(BaseModel):
    swagger: Optional[bytes] = Field(None, description='Swagger file')
